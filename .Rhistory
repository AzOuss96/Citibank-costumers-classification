NB.fit<-naiveBayes(Ethnicity~.,data=train)
# Predicting using the test set
NB.pred <- predict(NB.fit,test)
# Concatenating the results of prediction and true values for all cross validation iterations
NB_predval<- c(NB_predval,as.factor(as.vector(NB.pred)))
NB_trueval<-c(NB_trueval,test$Ethnicity)
}
NB_facactual<-as.factor(NB_trueval)
NB_facpred <- as.factor(NB_predval)
# Confusing matrix for the CV
NB_cfm <- confusionMatrix(NB_facactual,NB_facpred)
ggplotConfusionMatrix(NB_cfm)
#Randomly shuffle the data
set.seed(1)
credit2<-credit2[sample(nrow(credit2)),]
#Create 10 equally size folds
folds <- cut(seq(1,nrow(credit2)),breaks=10,labels=FALSE)
#Perform 10 fold cross validation
NB_predval<-vector()
NB_trueval<-vector()
for(i in 1:10){
#Segementing data by fold using the which() function
testIndexes <- which(folds==i,arr.ind=TRUE)
# Creating test and train sets
test <- credit2[testIndexes, ]
train <- credit2[-testIndexes, ]
# Fitting the model to the training set
NB.fit<-naiveBayes(Ethnicity~.,data=train)
# Predicting using the test set
NB.pred <- predict(NB.fit,test)
# Concatenating the results of prediction and true values for all cross validation iterations
NB_predval<- c(NB_predval,as.factor(as.vector(NB.pred)))
NB_trueval<-c(NB_trueval,test$Ethnicity)
}
NB_facactual<-as.factor(NB_trueval)
NB_facpred <- as.factor(NB_predval)
# Confusing matrix for the CV
NB_cfm <- confusionMatrix(NB_facactual,NB_facpred)
ggplotConfusionMatrix(NB_cfm)
#Randomly shuffle the data
set.seed(1)
credit2<-credit2[sample(nrow(credit2)),]
#Create 10 equally size folds
folds <- cut(seq(1,nrow(credit2)),breaks=10,labels=FALSE)
#Perform 10 fold cross validation
NB_predval<-vector()
NB_trueval<-vector()
for(i in 1:10){
#Segementing data by fold using the which() function
testIndexes <- which(folds==i,arr.ind=TRUE)
# Creating test and train sets
test <- credit2[testIndexes, ]
train <- credit2[-testIndexes, ]
# Fitting the model to the training set
NB.fit<-naiveBayes(Ethnicity~.,data=train)
# Predicting using the test set
NB.pred <- predict(NB.fit,test)
# Concatenating the results of prediction and true values for all cross validation iterations
NB_predval<- c(NB_predval,as.factor(as.vector(NB.pred)))
NB_trueval<-c(NB_trueval,test$Ethnicity)
}
NB_facactual<-as.factor(NB_trueval)
NB_facpred <- as.factor(NB_predval)
# Confusing matrix for the CV
NB_cfm <- confusionMatrix(NB_facactual,NB_facpred)
ggplotConfusionMatrix(NB_cfm)
#Randomly shuffle the data
set.seed(1)
credit2<-credit2[sample(nrow(credit2)),]
#Create 10 equally size folds
folds <- cut(seq(1,nrow(credit2)),breaks=10,labels=FALSE)
#Perform 10 fold cross validation
NB_predval<-vector()
NB_trueval<-vector()
for(i in 1:10){
#Segementing data by fold using the which() function
testIndexes <- which(folds==i,arr.ind=TRUE)
# Creating test and train sets
test <- credit2[testIndexes, ]
train <- credit2[-testIndexes, ]
# Fitting the model to the training set
NB.fit<-naiveBayes(Ethnicity~.,data=train)
# Predicting using the test set
NB.pred <- predict(NB.fit,test)
# Concatenating the results of prediction and true values for all cross validation iterations
NB_predval<- c(NB_predval,as.factor(as.vector(NB.pred)))
NB_trueval<-c(NB_trueval,test$Ethnicity)
}
NB_facactual<-as.factor(NB_trueval)
NB_facpred <- as.factor(NB_predval)
# Confusing matrix for the CV
NB_cfm <- confusionMatrix(NB_facactual,NB_facpred)
ggplotConfusionMatrix(NB_cfm)
rmarkdown::render("Report.Rmd")
summary(multilogmodel.fit)
set.seed(100)
sample <- sample.int(n = nrow(credit2), size = floor(.75*nrow(credit2)), replace = F)
train <- credit2[sample, ]
test  <- credit2[-sample, ]
multilogmodel.fit <-multinom(Ethnicity~Income+Balance+Limit+Cards+Education+Age+Rating,data=train)
multilogmodel.pred<-predict(multilogmodel.fit,as.data.frame(test),type="class")
multilog_cfm <- confusionMatrix(test$Ethnicity,multilogmodel.pred)
multilog_testacc <- as.vector(multilog_cfm$overall)[1]*100
ggplotConfusionMatrix(multilog_cfm)
summary(multilogmodel.fit)
rmarkdown::render("Report.Rmd")
ggplotConfusionMatrix(multilog_cfm)
multilogmodel.fit
summary(multilogmodel.fit)
rmarkdown::render("Report.Rmd")
plotcp(DT2)
set.seed(200)
sample <- sample.int(n = nrow(credit2), size = floor(.75*nrow(credit2)), replace = F)
train <- credit2[sample, ]
test  <- credit2[-sample, ]
DT2<-rpart(Ethnicity~.,data=train,method="class")
summary(DT2)
plotcp(DT2)
set.seed(200)
sample <- sample.int(n = nrow(credit2), size = floor(.75*nrow(credit2)), replace = F)
train <- credit2[sample, ]
test  <- credit2[-sample, ]
DT2<-rpart(Ethnicity~.,data=train,method="class")
summary(DT2)
plot(DT2)
plotcp(DT2)
printcp(DT2)
set.seed(200)
sample <- sample.int(n = nrow(credit2), size = floor(.75*nrow(credit2)), replace = F)
train <- credit2[sample, ]
test  <- credit2[-sample, ]
DT2<-rpart(Ethnicity~.,data=train,method="class")
summary(DT2)
plot(DT2)
plotcp(DT2)
printcp(DT2)
set.seed(100)
sample <- sample.int(n = nrow(credit2), size = floor(.75*nrow(credit2)), replace = F)
train <- credit2[sample, ]
test  <- credit2[-sample, ]
DT2<-rpart(Ethnicity~.,data=train,method="class")
summary(DT2)
plot(DT2)
plotcp(DT2)
set.seed(101)
sample <- sample.int(n = nrow(credit2), size = floor(.75*nrow(credit2)), replace = F)
train <- credit2[sample, ]
test  <- credit2[-sample, ]
DT2<-rpart(Ethnicity~.,data=train,method="class")
summary(DT2)
plot(DT2)
plotcp(DT2)
set.seed(101)
sample <- sample.int(n = nrow(credit2), size = floor(.75*nrow(credit2)), replace = F)
train <- credit2[sample, ]
test  <- credit2[-sample, ]
DT2<-rpart(Ethnicity~.,data=train,method="class")
summary(DT2)
plot(DT2)
plotcp(DT2)
set.seed(102)
sample <- sample.int(n = nrow(credit2), size = floor(.75*nrow(credit2)), replace = F)
train <- credit2[sample, ]
test  <- credit2[-sample, ]
DT2<-rpart(Ethnicity~.,data=train,method="class")
summary(DT2)
plot(DT2)
plotcp(DT2)
# Prune the hr_base_model based on the optimal cp value
DT2_postprun <- prune(DT2, cp = 0.014 )
# Compute the accuracy of the pruned tree
test$pred <- predict(DT2_postprun, test, type = "class")
DT2accuracy_postprun <- mean(test$pred == test$Ethnicity)
rpart.plot(DT2_postprun,box.palette = "RdBu",shadow.col="gray",nn=T,fallen.leaves= F,varlen = 5)
DT2_cfm<-confusionMatrix(test$Ethnicity,test$pred)
ggplotConfusionMatrix(DT2_cfm)
#Randomly shuffle the data
set.seed(1)
credit2<-credit2[sample(nrow(credit2)),]
#Create 10 equally size folds
folds <- cut(seq(1,nrow(credit3)),breaks=10,labels=FALSE)
#Perform 10 fold cross validation
DT2_predval<-vector()
DT2_trueval<-vector()
for(i in 1:10){
#Segementing data by fold using the which() function
testIndexes <- which(folds==i,arr.ind=TRUE)
# Creating test and train sets
test <- credit3[testIndexes, ]
#train <- credit3[-testIndexes, ]
# Predicting using the pruned tree
test$pred <- predict(DT2_postprun, test, type = "class")
# Concatenating the results of prediction and true values for all cross validation iterations
DT2_predval<- c(DT2_predval,as.factor(as.vector(test$pred)))
DT2_trueval<-c(DT2_trueval,test$Ethnicity)
}
DT2_facactual<-as.factor(DT2_trueval)
DT2_facpred <- as.factor(DT2_predval)
# Confusing matrix for the CV
DT2_cfm <- confusionMatrix(DT2_facactual,DT2_facpred)
ggplotConfusionMatrix(DT2_cfm)
#Randomly shuffle the data
set.seed(1)
credit2<-credit2[sample(nrow(credit2)),]
#Create 10 equally size folds
folds <- cut(seq(1,nrow(credit2)),breaks=10,labels=FALSE)
#Perform 10 fold cross validation
DT2_predval<-vector()
DT2_trueval<-vector()
for(i in 1:10){
#Segementing data by fold using the which() function
testIndexes <- which(folds==i,arr.ind=TRUE)
# Creating test and train sets
test <- credit3[testIndexes, ]
#train <- credit3[-testIndexes, ]
# Predicting using the pruned tree
test$pred <- predict(DT2_postprun, test, type = "class")
# Concatenating the results of prediction and true values for all cross validation iterations
DT2_predval<- c(DT2_predval,as.factor(as.vector(test$pred)))
DT2_trueval<-c(DT2_trueval,test$Ethnicity)
}
DT2_facactual<-as.factor(DT2_trueval)
DT2_facpred <- as.factor(DT2_predval)
# Confusing matrix for the CV
DT2_cfm <- confusionMatrix(DT2_facactual,DT2_facpred)
ggplotConfusionMatrix(DT2_cfm)
head(credit2)
set.seed(102)
sample <- sample.int(n = nrow(credit2), size = floor(.75*nrow(credit2)), replace = F)
train <- credit2[sample, ]
test  <- credit2[-sample, ]
DT2<-rpart(Ethnicity~.,data=train,method="class")
summary(DT2)
plot(DT2)
plotcp(DT2)
printcp(DT2)
test$pred <- predict(DT2, test, type = "class")
DT2base_accuracy <- mean(test$Ethnicity == test$pred)
# Prune the hr_base_model based on the optimal cp value
DT2_postprun <- prune(DT2, cp = 0.014 )
# Compute the accuracy of the pruned tree
test$pred <- predict(DT2_postprun, test, type = "class")
DT2accuracy_postprun <- mean(test$pred == test$Ethnicity)
rpart.plot(DT2_postprun,box.palette = "RdBu",shadow.col="gray",nn=T,fallen.leaves= F,varlen = 5)
DT2_cfm<-confusionMatrix(test$Ethnicity,test$pred)
ggplotConfusionMatrix(DT2_cfm)
#Randomly shuffle the data
set.seed(1)
credit2<-credit2[sample(nrow(credit2)),]
#Create 10 equally size folds
folds <- cut(seq(1,nrow(credit2)),breaks=10,labels=FALSE)
#Perform 10 fold cross validation
DT2_predval<-vector()
DT2_trueval<-vector()
for(i in 1:10){
#Segementing data by fold using the which() function
testIndexes <- which(folds==i,arr.ind=TRUE)
# Creating test and train sets
test <- credit3[testIndexes, ]
#train <- credit3[-testIndexes, ]
# Predicting using the pruned tree
test$pred <- predict(DT2_postprun, test, type = "class")
# Concatenating the results of prediction and true values for all cross validation iterations
DT2_predval<- c(DT2_predval,as.factor(as.vector(test$pred)))
DT2_trueval<-c(DT2_trueval,test$Ethnicity)
}
DT2_facactual<-as.factor(DT2_trueval)
DT2_facpred <- as.factor(DT2_predval)
# Confusing matrix for the CV
DT2_cfm <- confusionMatrix(DT2_facactual,DT2_facpred)
ggplotConfusionMatrix(DT2_cfm)
head(test)
#Randomly shuffle the data
set.seed(1)
credit2<-credit2[sample(nrow(credit2)),]
#Create 10 equally size folds
folds <- cut(seq(1,nrow(credit2)),breaks=10,labels=FALSE)
#Perform 10 fold cross validation
DT2_predval<-vector()
DT2_trueval<-vector()
for(i in 1:10){
#Segementing data by fold using the which() function
testIndexes <- which(folds==i,arr.ind=TRUE)
# Creating test and train sets
test <- credit2[testIndexes, ]
#train <- credit3[-testIndexes, ]
# Predicting using the pruned tree
test$pred <- predict(DT2_postprun, test, type = "class")
# Concatenating the results of prediction and true values for all cross validation iterations
DT2_predval<- c(DT2_predval,as.factor(as.vector(test$pred)))
DT2_trueval<-c(DT2_trueval,test$Ethnicity)
}
DT2_facactual<-as.factor(DT2_trueval)
DT2_facpred <- as.factor(DT2_predval)
# Confusing matrix for the CV
DT2_cfm <- confusionMatrix(DT2_facactual,DT2_facpred)
ggplotConfusionMatrix(DT2_cfm)
#Randomly shuffle the data
set.seed(1)
credit2<-credit2[sample(nrow(credit2)),]
#Create 10 equally size folds
folds <- cut(seq(1,nrow(credit2)),breaks=10,labels=FALSE)
#Perform 10 fold cross validation
DT2_predval<-vector()
DT2_trueval<-vector()
for(i in 1:10){
#Segementing data by fold using the which() function
testIndexes <- which(folds==i,arr.ind=TRUE)
# Creating test and train sets
test <- credit2[testIndexes, ]
#train <- credit3[-testIndexes, ]
# Predicting using the pruned tree
test$pred <- predict(DT2_postprun, test, type = "class")
# Concatenating the results of prediction and true values for all cross validation iterations
DT2_predval<- c(DT2_predval,as.factor(as.vector(test$pred)))
DT2_trueval<-c(DT2_trueval,test$Ethnicity)
}
DT2_facactual<-as.factor(DT2_trueval)
DT2_facpred <- as.factor(DT2_predval)
# Confusing matrix for the CV
DT2_cfm <- confusionMatrix(DT2_facactual,DT2_facpred)
ggplotConfusionMatrix(DT2_cfm)
#Randomly shuffle the data
set.seed(1)
credit2<-credit2[sample(nrow(credit2)),]
#Create 10 equally size folds
folds <- cut(seq(1,nrow(credit2)),breaks=10,labels=FALSE)
#Perform 10 fold cross validation
DT2_predval<-vector()
DT2_trueval<-vector()
for(i in 1:10){
#Segementing data by fold using the which() function
testIndexes <- which(folds==i,arr.ind=TRUE)
# Creating test and train sets
test <- credit2[testIndexes, ]
#train <- credit3[-testIndexes, ]
# Predicting using the pruned tree
test$pred <- predict(DT2_postprun, test, type = "class")
# Concatenating the results of prediction and true values for all cross validation iterations
DT2_predval<- c(DT2_predval,as.factor(as.vector(test$pred)))
DT2_trueval<-c(DT2_trueval,test$Ethnicity)
}
DT2_facactual<-as.factor(DT2_trueval)
DT2_facpred <- as.factor(DT2_predval)
# Confusing matrix for the CV
DT2_cfm <- confusionMatrix(DT2_facactual,DT2_facpred)
ggplotConfusionMatrix(DT2_cfm)
#Randomly shuffle the data
#set.seed(1)
credit2<-credit2[sample(nrow(credit2)),]
#Create 10 equally size folds
folds <- cut(seq(1,nrow(credit2)),breaks=10,labels=FALSE)
#Perform 10 fold cross validation
DT2_predval<-vector()
DT2_trueval<-vector()
for(i in 1:10){
#Segementing data by fold using the which() function
testIndexes <- which(folds==i,arr.ind=TRUE)
# Creating test and train sets
test <- credit2[testIndexes, ]
#train <- credit3[-testIndexes, ]
# Predicting using the pruned tree
test$pred <- predict(DT2_postprun, test, type = "class")
# Concatenating the results of prediction and true values for all cross validation iterations
DT2_predval<- c(DT2_predval,as.factor(as.vector(test$pred)))
DT2_trueval<-c(DT2_trueval,test$Ethnicity)
}
DT2_facactual<-as.factor(DT2_trueval)
DT2_facpred <- as.factor(DT2_predval)
# Confusing matrix for the CV
DT2_cfm <- confusionMatrix(DT2_facactual,DT2_facpred)
ggplotConfusionMatrix(DT2_cfm)
#Randomly shuffle the data
#set.seed(1)
credit2<-credit2[sample(nrow(credit2)),]
#Create 10 equally size folds
folds <- cut(seq(1,nrow(credit2)),breaks=10,labels=FALSE)
#Perform 10 fold cross validation
DT2_predval<-vector()
DT2_trueval<-vector()
for(i in 1:10){
#Segementing data by fold using the which() function
testIndexes <- which(folds==i,arr.ind=TRUE)
# Creating test and train sets
test <- credit2[testIndexes, ]
#train <- credit3[-testIndexes, ]
# Predicting using the pruned tree
test$pred <- predict(DT2_postprun, test, type = "class")
# Concatenating the results of prediction and true values for all cross validation iterations
DT2_predval<- c(DT2_predval,as.factor(as.vector(test$pred)))
DT2_trueval<-c(DT2_trueval,test$Ethnicity)
}
DT2_facactual<-as.factor(DT2_trueval)
DT2_facpred <- as.factor(DT2_predval)
# Confusing matrix for the CV
DT2_cfm <- confusionMatrix(DT2_facactual,DT2_facpred)
ggplotConfusionMatrix(DT2_cfm)
#Randomly shuffle the data
#set.seed(1)
credit2<-credit2[sample(nrow(credit2)),]
#Create 10 equally size folds
folds <- cut(seq(1,nrow(credit2)),breaks=10,labels=FALSE)
#Perform 10 fold cross validation
DT2_predval<-vector()
DT2_trueval<-vector()
for(i in 1:10){
#Segementing data by fold using the which() function
testIndexes <- which(folds==i,arr.ind=TRUE)
# Creating test and train sets
test <- credit2[testIndexes, ]
#train <- credit3[-testIndexes, ]
# Predicting using the pruned tree
test$pred <- predict(DT2_postprun, test, type = "class")
# Concatenating the results of prediction and true values for all cross validation iterations
DT2_predval<- c(DT2_predval,as.factor(as.vector(test$pred)))
DT2_trueval<-c(DT2_trueval,test$Ethnicity)
}
DT2_facactual<-as.factor(DT2_trueval)
DT2_facpred <- as.factor(DT2_predval)
# Confusing matrix for the CV
DT2_cfm <- confusionMatrix(DT2_facactual,DT2_facpred)
ggplotConfusionMatrix(DT2_cfm)
ggplotConfusionMatrix(DT2_cfm)
ggplotConfusionMatrix(DT2_cfm)
test
#Randomly shuffle the data
#set.seed(1)
credit2<-credit2[sample(nrow(credit2)),]
#Create 10 equally size folds
folds <- cut(seq(1,nrow(credit2)),breaks=10,labels=FALSE)
#Perform 10 fold cross validation
DT2_predval<-vector()
DT2_trueval<-vector()
for(i in 1:10){
#Segementing data by fold using the which() function
testIndexes <- which(folds==i,arr.ind=TRUE)
# Creating test and train sets
test <- credit2[testIndexes, ]
#train <- credit3[-testIndexes, ]
# Predicting using the pruned tree
test$pred <- predict(DT2_postprun, test, type = "class")
# Concatenating the results of prediction and true values for all cross validation iterations
DT2_predval<- c(DT2_predval,as.factor(as.vector(test$pred)))
DT2_trueval<-c(DT2_trueval,test$Ethnicity)
}
DT2_facactual<-as.factor(DT2_trueval)
DT2_facpred <- as.factor(DT2_predval)
# Confusing matrix for the CV
DT2_cfm <- confusionMatrix(DT2_facactual,DT2_facpred)
ggplotConfusionMatrix(DT2_cfm)
test
DT2<-rpart(Ethnicity~.,data=train,method="class",cp = 0.014)
#############################
set.seed(102)
sample <- sample.int(n = nrow(credit2), size = floor(.75*nrow(credit2)), replace = F)
train <- credit2[sample, ]
test  <- credit2[-sample, ]
DT2<-rpart(Ethnicity~.,data=train,method="class",cp = 0.014)
summary(DT2)
plot(DT2)
plotcp(DT2)
printcp(DT2)
test$pred <- predict(DT2, test, type = "class")
DT2base_accuracy <- mean(test$Ethnicity == test$pred)
# Prune the hr_base_model based on the optimal cp value
DT2_postprun <- prune(DT2, cp = 0.014 )
# Compute the accuracy of the pruned tree
test$pred <- predict(DT2_postprun, test, type = "class")
DT2accuracy_postprun <- mean(test$pred == test$Ethnicity)
rpart.plot(DT2_postprun,box.palette = "RdBu",shadow.col="gray",nn=T,fallen.leaves= F,varlen = 5)
DT2_cfm<-confusionMatrix(test$Ethnicity,test$pred)
ggplotConfusionMatrix(DT2_cfm)
#############################
set.seed(102)
sample <- sample.int(n = nrow(credit2), size = floor(.75*nrow(credit2)), replace = F)
train <- credit2[sample, ]
test  <- credit2[-sample, ]
DT2<-rpart(Ethnicity~.,data=train,method="class",cp = 0.014)
summary(DT2)
plot(DT2)
plotcp(DT2)
printcp(DT2)
test$pred <- predict(DT2, test, type = "class")
DT2base_accuracy <- mean(test$Ethnicity == test$pred)
# Prune the hr_base_model based on the optimal cp value
DT2_postprun <- prune(DT2, cp = 0.014 )
# Compute the accuracy of the pruned tree
test$pred <- predict(DT2_postprun, test, type = "class")
DT2accuracy_postprun <- mean(test$pred == test$Ethnicity)
rpart.plot(DT2_postprun,box.palette = "RdBu",shadow.col="gray",nn=T,fallen.leaves= F,varlen = 5)
DT2_cfm<-confusionMatrix(test$Ethnicity,test$pred)
ggplotConfusionMatrix(DT2_cfm)
TestSVM<-read.table("data/Test.txt",header = T)
# Normalizing Test using the first data means and standard deviations
for (feat in features){
TestSVM[feat][,1]<-(TestSVM[feat][,1]-mean(credit1[feat][,1]))/sd(credit1[feat][,1])
}
Ethnicity<-predict(svm.fit,as.data.frame(TestSVM[features]))
TestSVM<-as.data.frame(read.table("data/Test.txt",header = T))
Test$Ethnicity <- Ethnicity
credit1
TestDT2<-read.table("data/Test.txt",header = T)
# Normalizing Test using the first data means and standard deviations
for (feat in features){
TestDT2[feat][,1]<-(TestDT2[feat][,1]-mean(credit1[feat][,1]))/sd(credit1[feat][,1])
}
Ethnicity<-predict(svm.fit,as.data.frame(TestDT2[features]))
TestDT2<-as.data.frame(read.table("data/Test.txt",header = T))
TestDT2$Ethnicity <- Ethnicity
rmarkdown::render("Report.Rmd")
install.packages("webshot")
webshot::install_phantomjs()
